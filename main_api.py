# main_api.py

import pandas as pd
from fastapi import FastAPI, HTTPException
from datetime import datetime, timedelta
from typing import Optional

# Import c√°c h√†m t·ª´ file lay_data_stock.py
from lay_data_stock import (
    lay_du_lieu_co_phieu_vnstock, 
    tinh_toan_chi_bao_ky_thuat,
    detect_free_patterns,
    detect_large_chart_patterns,
    phan_tich_pattern_results,
    get_market_context,
    get_sector_analysis,
    comprehensive_gti_analysis,
    prepare_news_search_context,
    market_scan_parallel,
    market_scan_by_category,
    market_scan_top_picks,
    scan_single_stock
)

from config import GTIConfig

# üöÄ Import Cache Manager
from cache_manager import gti_cache, cache_stock_analysis, cache_market_scan

# üîÑ Import Task Manager for Async Processing
from task_manager import task_manager

# Kh·ªüi t·∫°o ·ª©ng d·ª•ng FastAPI
app = FastAPI(
    title="üöÄ GTI Stock Analysis API",
    description="API ph√¢n t√≠ch ch·ª©ng kho√°n Vi·ªát Nam v·ªõi h·ªá th·ªëng GTI (Growth Trading Intelligence) + Pattern Detection mi·ªÖn ph√≠",
    version="3.0.0",
    contact={
        "name": "GTI Analysis System",
        "url": "https://github.com/nhtquangg/gti-stock-analysis-api",
    },
)

@app.get("/")
def read_root():
    return {
        "message": "üöÄ Ch√†o m·ª´ng ƒë·∫øn v·ªõi GTI Stock Analysis API!",
        "he_thong": "GTI PRO v3.0 - Growth Trading Intelligence + Market Scanner",
        "phien_ban": "3.3.0",
        "tinh_nang": [
            "üî• GTI Core Analysis (4 ti√™u ch√≠ c·ªët l√µi)",
            "üéØ Enhanced Pattern Detection (16 patterns: 12 basic + 4 large)",
            "üåä Market Context Analysis (VNINDEX + Sector)",
            "üì∞ News Search Integration (cho ChatGPT)",
            "‚ö° Combined Scoring (-5 to +18 range)",
            "üöÄ Comprehensive Analysis API",
            "üîç Market Scanner - Qu√©t to√†n b·ªô th·ªã tr∆∞·ªùng",
            "üèÜ Top Picks - T√¨m m√£ t·ªët nh·∫•t",
            "üè¢ Sector Analysis - Ph√¢n t√≠ch theo ng√†nh",
            "üéØ Custom List Scanning"
        ],
        "endpoints": {
            "individual_analysis": {
                "/phan-tich/{ma_co_phieu}": "Ph√¢n t√≠ch GTI c∆° b·∫£n",
                "/full-analysis/{ma_co_phieu}": "üöÄ GTI PRO v3.0 - Ph√¢n t√≠ch to√†n di·ªán",
                "/news-context/{ma_co_phieu}": "News search context cho ChatGPT"
            },
            "market_scanning": {
                "/market-scan": "üîç Qu√©t th·ªã tr∆∞·ªùng theo danh m·ª•c (VN30, ng√†nh, popular)",
                "/market-scan/vn30": "üéØ Quick VN30 scan v·ªõi ti√™u ch√≠ cao",
                "/market-scan/top-picks": "üèÜ TOP picks t·ª´ t·∫•t c·∫£ sectors",
                "/market-scan/sector/{sector}": "üè¢ Qu√©t theo ng√†nh c·ª• th·ªÉ (~40 m√£)",
                "/market-scan/custom": "üéØ Qu√©t danh s√°ch t√πy ch·ªânh",
                "/market-scan/quick-check/{stock}": "‚ö° Ki·ªÉm tra nhanh m·ªôt m√£"
            },
            "async_market_scanning": {
                "POST /market-scan/start": "üöÄ B·∫Øt ƒë·∫ßu t√°c v·ª• qu√©t b·∫•t ƒë·ªìng b·ªô (tr√°nh timeout)",
                "GET /market-scan/status/{task_id}": "üîç Ki·ªÉm tra tr·∫°ng th√°i t√°c v·ª•",
                "GET /market-scan/result/{task_id}": "üìä L·∫•y k·∫øt qu·∫£ khi ho√†n th√†nh",
                "/tasks/stats": "üìä Th·ªëng k√™ task manager"
            },
            "system_info": {
                "/gti-info": "Th√¥ng tin v·ªÅ h·ªá th·ªëng GTI",
                "/patterns-info": "Th√¥ng tin v·ªÅ 16 patterns (12 basic + 4 large)"
            }
        },
        "vi_du_su_dung": {
            "phan_tich_don_le": "/full-analysis/FPT",
            "quet_vn30_nhanh": "/market-scan/vn30",
            "top_picks_dong_bo": "/market-scan/top-picks?limit=10",
            "quet_ngan_hang": "/market-scan/sector/banking",
            "quet_tuy_chinh_nho": "/market-scan/custom?stocks=FPT,VIC,HPG,VCB",
            "kiem_tra_nhanh": "/market-scan/quick-check/FPT"
        },
        "vi_du_async": {
            "bat_dau_top_picks": "POST /market-scan/start?task_type=top_picks&limit=15",
            "bat_dau_sector_scan": "POST /market-scan/start?task_type=sector_scan&sector=banking",
            "kiem_tra_trang_thai": "GET /market-scan/status/{task_id}",
            "lay_ket_qua": "GET /market-scan/result/{task_id}",
            "note": "üöÄ D√πng async cho scans l·ªõn (>20 m√£) ƒë·ªÉ tr√°nh timeout"
        },
        "danh_muc_ho_tro": {
            "stock_lists": ["vn30", "popular"],
            "sectors": ["banking", "real_estate", "technology", "manufacturing", "consumer", "energy", "securities", "construction", "utilities", "transportation"],
            "sector_sizes": {
                "banking": "40 m√£ (t·ª´ big banks ƒë·∫øn financial services)",
                "real_estate": "40 m√£ (developers, construction, infrastructure)",
                "technology": "40 m√£ (IT services, telecom, hardware, software)",
                "manufacturing": "40 m√£ (steel, chemicals, electronics, machinery)",
                "consumer": "40 m√£ (retail, F&B, personal care, tourism)",
                "energy": "40 m√£ (oil & gas, power, renewable, mining)",
                "securities": "40 m√£ (securities firms, asset management)",
                "construction": "40 m√£ (construction, infrastructure, materials)",
                "utilities": "40 m√£ (power, water, transport utilities)",
                "transportation": "40 m√£ (airlines, shipping, logistics, ports)"
            }
        }
    }

@app.get("/phan-tich/{ma_co_phieu}")
def phan_tich_co_phieu(ma_co_phieu: str):
    """
    Endpoint ph√¢n t√≠ch GTI c∆° b·∫£n cho m·ªôt m√£ c·ªï phi·∫øu.
    
    Returns:
        Ph√¢n t√≠ch GTI v·ªõi ƒëi·ªÉm s·ªë 0-4 v√† t√≠n hi·ªáu BUY/HOLD/AVOID
    """
    # T√≠nh to√°n th·ªùi gian l·∫•y d·ªØ li·ªáu (1 nƒÉm t·ª´ hi·ªán t·∫°i)
    end_date = datetime.now().strftime("%Y-%m-%d")
    start_date = (datetime.now() - timedelta(days=365)).strftime("%Y-%m-%d")
    
    # L·∫•y d·ªØ li·ªáu
    df = lay_du_lieu_co_phieu_vnstock(
        ma_co_phieu=ma_co_phieu.upper(),
        start_date=start_date,
        end_date=end_date
    )
    
    if df is None or df.empty:
        raise HTTPException(status_code=404, detail=f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£: {ma_co_phieu}")
    
    # T√≠nh to√°n ch·ªâ b√°o GTI
    df_analyzed = tinh_toan_chi_bao_ky_thuat(df)
    
    # L·∫•y k·∫øt qu·∫£ c·ªßa ng√†y giao d·ªãch g·∫ßn nh·∫•t
    latest = df_analyzed.iloc[-1]
    
    # Chu·∫©n b·ªã k·∫øt qu·∫£ tr·∫£ v·ªÅ theo format GTI
    result = {
        # Th√¥ng tin c∆° b·∫£n
        "ma_co_phieu": ma_co_phieu.upper(),
        "ngay_cap_nhat": latest.name.strftime("%Y-%m-%d") if hasattr(latest.name, 'strftime') else str(latest.name),
        "gia_dong_cua": round(float(latest['close']), 2),
        "gia_cao_nhat": round(float(latest['high']), 2),
        "gia_thap_nhat": round(float(latest['low']), 2),
        "khoi_luong": int(latest['volume']) if pd.notna(latest['volume']) else 0,
        
        # C√°c ƒë∆∞·ªùng EMA theo GTI
        "EMA10": round(float(latest['EMA10']), 2) if pd.notna(latest['EMA10']) else None,
        "EMA20": round(float(latest['EMA20']), 2) if pd.notna(latest['EMA20']) else None,
        "EMA50": round(float(latest['EMA50']), 2) if pd.notna(latest['EMA50']) else None,
        "EMA200": round(float(latest['EMA200']), 2) if pd.notna(latest['EMA200']) else None,
        
        # C√°c ch·ªâ s·ªë GTI ch√≠nh
        "gti_trend_check": bool(latest['gti_trend_check']) if pd.notna(latest['gti_trend_check']) else False,
        "gti_recent_breakout": bool(latest['gti_recent_breakout']) if pd.notna(latest['gti_recent_breakout']) else False,
        "gti_dist_to_high_percent": round(float(latest['gti_dist_to_high_percent']), 2) if pd.notna(latest['gti_dist_to_high_percent']) else None,
        "gti_is_pullback": bool(latest['gti_is_pullback']) if pd.notna(latest['gti_is_pullback']) else False,
        
        # T·ªïng k·∫øt GTI
        "gti_score": int(latest['gti_score']) if pd.notna(latest['gti_score']) else 0,
        "gti_signal": str(latest['gti_signal']) if pd.notna(latest['gti_signal']) else "HOLD",
        
        # Metadata
        "he_thong": "GTI - Growth Trading Intelligence",
        "phien_ban": "3.0.0",
        "ghi_chu": "Ph√¢n t√≠ch GTI c∆° b·∫£n. S·ª≠ d·ª•ng /full-analysis/{ma_co_phieu} ƒë·ªÉ c√≥ pattern detection."
    }

    return result

@app.get("/full-analysis/{ma_co_phieu}")
def full_analysis_co_phieu(ma_co_phieu: str):
    """
    üöÄ Endpoint ph√¢n t√≠ch GTI PRO v2.0 TO√ÄN DI·ªÜN
    
    Includes:
    - GTI Core (4 ti√™u ch√≠) + Enhanced Patterns (16 patterns)
    - Market Context (VNINDEX) + Sector Analysis  
    - News Search Context cho ChatGPT
    - Combined Scoring (-5 to +18 range)
    """
    try:
        # S·ª≠ d·ª•ng comprehensive analysis function m·ªõi
        result = comprehensive_gti_analysis(ma_co_phieu.upper())
        
        if result['status'] == 'error':
            raise HTTPException(status_code=404, detail=result['message'])
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói ph√¢n t√≠ch comprehensive cho {ma_co_phieu}: {str(e)}")

@app.get("/full-analysis-legacy/{ma_co_phieu}")
def full_analysis_legacy(ma_co_phieu: str):
    """
    üî• Endpoint ph√¢n t√≠ch ƒê·∫¶Y ƒê·ª¶ GTI + Pattern Detection (Legacy version)
    
    Returns:
        Ph√¢n t√≠ch t·ªïng h·ª£p GTI + 12 patterns mi·ªÖn ph√≠ + ƒëi·ªÉm t·ªïng h·ª£p
    """
    try:
        # T√≠nh to√°n th·ªùi gian l·∫•y d·ªØ li·ªáu (1 nƒÉm t·ª´ hi·ªán t·∫°i)
        end_date = datetime.now().strftime("%Y-%m-%d")
        start_date = (datetime.now() - timedelta(days=365)).strftime("%Y-%m-%d")
        
        # L·∫•y d·ªØ li·ªáu
        df = lay_du_lieu_co_phieu_vnstock(
            ma_co_phieu=ma_co_phieu.upper(),
            start_date=start_date,
            end_date=end_date
        )
        
        if df is None or df.empty:
            raise HTTPException(status_code=404, detail=f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£: {ma_co_phieu}")
        
        # T√≠nh to√°n ch·ªâ b√°o GTI
        df_analyzed = tinh_toan_chi_bao_ky_thuat(df)
        
        # Ph√°t hi·ªán patterns mi·ªÖn ph√≠
        df_patterns = detect_free_patterns(df_analyzed)
        
        # üî• TH√äM: Ph√°t hi·ªán large chart patterns
        df_patterns = detect_large_chart_patterns(df_patterns)
        
        # Ph√¢n t√≠ch k·∫øt qu·∫£ patterns
        pattern_results = phan_tich_pattern_results(df_patterns, ma_co_phieu.upper())
        
        # üåä TH√äM: L·∫•y b·ªëi c·∫£nh th·ªã tr∆∞·ªùng v√† ng√†nh
        market_context = get_market_context()
        sector_analysis = get_sector_analysis(ma_co_phieu.upper())
        
        # L·∫•y k·∫øt qu·∫£ c·ªßa ng√†y giao d·ªãch g·∫ßn nh·∫•t
        latest = df_patterns.iloc[-1]
        
        # Safe date formatting
        try:
            if hasattr(latest.name, 'strftime'):
                ngay_cap_nhat = latest.name.strftime("%Y-%m-%d")
            else:
                ngay_cap_nhat = str(latest.name)
        except:
            ngay_cap_nhat = datetime.now().strftime("%Y-%m-%d")
        
        # T√≠nh ƒëi·ªÉm t·ªïng h·ª£p - ƒë·∫£m b·∫£o t·∫•t c·∫£ l√† int Python
        gti_score = int(latest['gti_score']) if pd.notna(latest['gti_score']) else 0
        bullish_score = int(pattern_results.get('bullish_score', 0))
        bearish_score = int(pattern_results.get('bearish_score', 0))
        tong_diem = int(gti_score + bullish_score - bearish_score)
        
        # ƒê√°nh gi√° t·ªïng h·ª£p
        if tong_diem >= 4:
            danh_gia = "üü¢ R·∫§T T√çCH C·ª∞C - C√ÇN NH·∫ÆC MUA"
            mau_sac = "green"
        elif tong_diem >= 2:
            danh_gia = "üü° T√çCH C·ª∞C - THEO D√ïI"
            mau_sac = "yellow"
        elif tong_diem >= 0:
            danh_gia = "üü† TRUNG T√çNH - CH·ªú T√çN HI·ªÜU"
            mau_sac = "orange"
        else:
            danh_gia = "üî¥ TI√äU C·ª∞C - TR√ÅNH XA"
            mau_sac = "red"
        
        # Chu·∫©n b·ªã k·∫øt qu·∫£ tr·∫£ v·ªÅ
        result = {
            # Th√¥ng tin c∆° b·∫£n
            "ma_co_phieu": ma_co_phieu.upper(),
            "ngay_cap_nhat": ngay_cap_nhat,
            "gia_dong_cua": round(float(latest['close']), 2),
            "khoi_luong": int(latest['volume']) if pd.notna(latest['volume']) else 0,
            
            # GTI Analysis
            "gti_analysis": {
                "gti_trend_check": bool(latest['gti_trend_check']) if pd.notna(latest['gti_trend_check']) else False,
                "gti_recent_breakout": bool(latest['gti_recent_breakout']) if pd.notna(latest['gti_recent_breakout']) else False,
                "gti_dist_to_high_percent": round(float(latest['gti_dist_to_high_percent']), 2) if pd.notna(latest['gti_dist_to_high_percent']) else None,
                "gti_is_pullback": bool(latest['gti_is_pullback']) if pd.notna(latest['gti_is_pullback']) else False,
                "gti_score": gti_score,
                "gti_signal": str(latest['gti_signal']) if pd.notna(latest['gti_signal']) else "HOLD"
            },
            
            # Pattern Analysis
            "pattern_analysis": {
                "bullish_score": bullish_score,
                "bearish_score": bearish_score,
                "current_patterns": pattern_results.get('current_patterns', []),
                "pattern_summary": f"{bullish_score}B/{bearish_score}Be"
            },
            
            # K·∫øt h·ª£p GTI + Patterns
            "combined_analysis": {
                "tong_diem": tong_diem,
                "danh_gia": danh_gia,
                "mau_sac": mau_sac,
                "chi_tiet": f"GTI: {gti_score}/4 + Pattern: {bullish_score}B/{bearish_score}Be"
            },
            
            # Support/Resistance Levels
            "levels": {
                "support_level": round(float(latest['support_level']), 2) if pd.notna(latest['support_level']) else None,
                "resistance_level": round(float(latest['resistance_level']), 2) if pd.notna(latest['resistance_level']) else None,
                "EMA10": round(float(latest['EMA10']), 2) if pd.notna(latest['EMA10']) else None,
                "EMA20": round(float(latest['EMA20']), 2) if pd.notna(latest['EMA20']) else None
            },
            
            # üåä Market Context & Sector Analysis
            "market_context": market_context,
            "sector_analysis": sector_analysis,
            
            # Metadata
            "he_thong": "GTI + Pattern Detection + Market Context",
            "phien_ban": "3.1.0",
            "timestamp": datetime.now().isoformat()
        }

        return result
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói x·ª≠ l√Ω d·ªØ li·ªáu cho {ma_co_phieu}: {str(e)}")

@app.get("/news-context/{ma_co_phieu}")
def get_news_context(ma_co_phieu: str):
    """
    üì∞ Endpoint cho ChatGPT l·∫•y news search context
    
    Returns:
        Context v√† h∆∞·ªõng d·∫´n search tin t·ª©c cho ChatGPT
    """
    try:
        # L·∫•y th√¥ng tin ng√†nh
        sector_analysis = get_sector_analysis(ma_co_phieu.upper())
        sector_name = sector_analysis.get('sector_name') if sector_analysis.get('status') == 'success' else None
        
        # T·∫°o news search context
        news_context = prepare_news_search_context(ma_co_phieu.upper(), sector_name)
        
        return {
            "stock_symbol": ma_co_phieu.upper(),
            "sector_info": {
                "sector_name": sector_name,
                "status": sector_analysis.get('status', 'unknown')
            },
            "news_search_context": news_context,
            "important_note": "üìä T·∫•t c·∫£ d·ªØ li·ªáu v·ªÅ gi√°, volume, ch·ªâ s·ªë k·ªπ thu·∫≠t ƒë√£ ƒë∆∞·ª£c cung c·∫•p qua API - CH·ªà search tin t·ª©c v√† s·ª± ki·ªán!"
        }
        
    except Exception as e:
        return {
            "error": f"L·ªói t·∫°o news context cho {ma_co_phieu}: {str(e)}",
            "fallback_context": prepare_news_search_context(ma_co_phieu.upper(), None)
        }

@app.get("/patterns-info")
def patterns_info():
    """
    Th√¥ng tin v·ªÅ 16 patterns ƒë∆∞·ª£c s·ª≠ d·ª•ng (12 basic + 4 large)
    """
    return {
        "title": "üéØ 16 Chart Patterns Detection",
        "version": "Enhanced v2.0",
        "basic_patterns": {
            "candlestick_patterns": [
                {"name": "Doji", "description": "N·∫øn doji - bi·ªÉu hi·ªán s·ª± do d·ª± c·ªßa th·ªã tr∆∞·ªùng", "points": 0},
                {"name": "Hammer", "description": "N·∫øn b√∫a - t√≠n hi·ªáu ƒë·∫£o chi·ªÅu tƒÉng", "points": "+1"},
                {"name": "Hanging Man", "description": "N·∫øn treo c·ªï - t√≠n hi·ªáu ƒë·∫£o chi·ªÅu gi·∫£m", "points": "-1"}
            ],
            "engulfing_patterns": [
                {"name": "Bullish Engulfing", "description": "N·∫øn bao ph·ªß tƒÉng - t√≠n hi·ªáu m·∫°nh", "points": "+1"},
                {"name": "Bearish Engulfing", "description": "N·∫øn bao ph·ªß gi·∫£m - t√≠n hi·ªáu y·∫øu", "points": "-1"}
            ],
            "star_patterns": [
                {"name": "Morning Star", "description": "Sao mai - 3 n·∫øn ƒë·∫£o chi·ªÅu tƒÉng", "points": "+1"},
                {"name": "Evening Star", "description": "Sao h√¥m - 3 n·∫øn ƒë·∫£o chi·ªÅu gi·∫£m", "points": "-1"}
            ],
            "breakout_patterns": [
                {"name": "Resistance Breakout", "description": "V∆∞·ª£t kh√°ng c·ª± v·ªõi volume cao", "points": "+1"},
                {"name": "Support Breakdown", "description": "Th·ªßng h·ªó tr·ª£ v·ªõi volume cao", "points": "-1"}
            ],
            "volume_patterns": [
                {"name": "Volume Spike", "description": "Kh·ªëi l∆∞·ª£ng b·∫•t th∆∞·ªùng > 2x trung b√¨nh", "points": 0}
            ],
            "gap_patterns": [
                {"name": "Gap Up", "description": "Gap tƒÉng v·ªõi momentum", "points": "+1"},
                {"name": "Gap Down", "description": "Gap gi·∫£m v·ªõi momentum", "points": "-1"}
            ],
            "trend_patterns": [
                {"name": "Strong Uptrend", "description": "Xu h∆∞·ªõng tƒÉng m·∫°nh 5 ng√†y", "points": "+1"}
            ]
        },
        "large_patterns": {
            "description": "Large chart patterns (worth 2 points each)",
            "patterns": [
                {"name": "Cup & Handle", "description": "Cup & Handle - m·∫´u h√¨nh ch·ª©a s√¢u + tay c·∫ßm", "points": "+2"},
                {"name": "Bull Flag", "description": "Bull Flag - c·ªôt c·ªù + consolidation", "points": "+2"},
                {"name": "Base n' Break", "description": "Base n' Break - t√≠ch l≈©y + breakout", "points": "+2"},
                {"name": "Ascending Triangle", "description": "Ascending Triangle - support tƒÉng d·∫ßn", "points": "+2"}
            ]
        },
        "scoring_system": {
            "basic_bullish": ["bullish_engulfing", "morning_star", "hammer", "resistance_breakout", "gap_up", "strong_uptrend"],
            "basic_bearish": ["bearish_engulfing", "evening_star", "hanging_man", "support_breakdown", "gap_down"],
            "neutral_patterns": ["doji", "volume_spike"],
            "large_bullish": ["cup_handle", "bull_flag", "base_n_break", "ascending_triangle"],
            "scoring_formula": "GTI (0-4) + Basic Bullish (+1 each) - Basic Bearish (-1 each) + Large Patterns (+2 each) + Market Context Adjustments"
        },
        "total_range": "Score range: -5 to +18 points"
    }

@app.get("/custom-gpt-instructions")
def get_custom_gpt_instructions():
    """
    Endpoint ƒë·ªÉ Custom GPT ƒë·ªçc h∆∞·ªõng d·∫´n t·ª´ file custom_gpt.md
    """
    try:
        with open("custom_gpt.md", "r", encoding="utf-8") as f:
            content = f.read()
        return {
            "instructions": content,
            "usage": "ƒê√¢y l√† h∆∞·ªõng d·∫´n chi ti·∫øt ƒë·ªÉ t√≠ch h·ª£p API v·ªõi Custom GPT",
            "api_base_url": "S·ª≠ d·ª•ng URL hi·ªán t·∫°i c·ªßa server n√†y",
            "main_endpoints": [
                "/full-analysis/{ma_co_phieu}",
                "/phan-tich/{ma_co_phieu}",
                "/gti-info",
                "/patterns-info"
            ]
        }
    except FileNotFoundError:
        return {"error": "File custom_gpt.md kh√¥ng t·ªìn t·∫°i"}
    except Exception as e:
        return {"error": f"L·ªói ƒë·ªçc file: {str(e)}"}

@app.get("/test")
def test_endpoint():
    """Simple test endpoint"""
    return {"status": "OK", "message": "Test endpoint works!"}

@app.get("/test-data/{stock}")
def test_data_only(stock: str):
    """Test data fetching only"""
    try:
        end_date = datetime.now().strftime("%Y-%m-%d")
        start_date = (datetime.now() - timedelta(days=365)).strftime("%Y-%m-%d")
        
        df = lay_du_lieu_co_phieu_vnstock(stock.upper(), start_date, end_date)
        
        if df is None or df.empty:
            return {"error": "No data", "stock": stock}
        
        return {
            "success": True,
            "stock": stock.upper(),
            "rows": len(df),
            "columns": len(df.columns),
            "last_close": float(df['close'].iloc[-1]),
            "columns_list": list(df.columns)[:5]
        }
    except Exception as e:
        return {"error": str(e), "type": type(e).__name__}

@app.get("/test-gti/{stock}")
def test_gti_only(stock: str):
    """Test GTI calculation only"""
    try:
        end_date = datetime.now().strftime("%Y-%m-%d")
        start_date = (datetime.now() - timedelta(days=365)).strftime("%Y-%m-%d")
        
        # Step 1: Get data
        df = lay_du_lieu_co_phieu_vnstock(stock.upper(), start_date, end_date)
        if df is None or df.empty:
            return {"error": "No data", "step": 1}
        
        # Step 2: GTI calculation
        df_gti = tinh_toan_chi_bao_ky_thuat(df)
        latest = df_gti.iloc[-1]
        
        return {
            "success": True,
            "stock": stock.upper(),
            "gti_score": int(latest['gti_score']),
            "gti_signal": str(latest['gti_signal']),
            "gti_trend_check": bool(latest['gti_trend_check']),
            "gti_recent_breakout": bool(latest['gti_recent_breakout']),
            "price": float(latest['close'])
        }
    except Exception as e:
        return {"error": str(e), "type": type(e).__name__}

@app.get("/debug/{ma_co_phieu}")
def debug_analysis(ma_co_phieu: str):
    """
    Debug endpoint ƒë·ªÉ test t·ª´ng b∆∞·ªõc
    """
    try:
        # Step 1: Get data
        end_date = datetime.now().strftime("%Y-%m-%d")
        start_date = (datetime.now() - timedelta(days=365)).strftime("%Y-%m-%d")
        
        df = lay_du_lieu_co_phieu_vnstock(ma_co_phieu.upper(), start_date, end_date)
        if df is None or df.empty:
            return {"error": "Kh√¥ng c√≥ d·ªØ li·ªáu", "step": 1}
        
        # Step 2: GTI calculation
        df_gti = tinh_toan_chi_bao_ky_thuat(df)
        
        # Step 3: Pattern detection
        df_patterns = detect_free_patterns(df_gti)
        
        # Step 4: Pattern results
        pattern_results = phan_tich_pattern_results(df_patterns, ma_co_phieu.upper())
        
        # Step 5: Latest data
        latest = df_patterns.iloc[-1]
        
        return {
            "success": True,
            "steps_completed": 5,
            "gti_score": int(latest['gti_score']),
            "bullish_score": pattern_results.get('bullish_score', 0),
            "bearish_score": pattern_results.get('bearish_score', 0),
            "pattern_results_keys": list(pattern_results.keys()) if pattern_results else [],
            "latest_columns": list(latest.index)[:10]  # First 10 columns
        }
        
    except Exception as e:
        return {"error": str(e), "type": str(type(e).__name__)}

@app.get("/gti-info")
def gti_info():
    """
    Th√¥ng tin chi ti·∫øt v·ªÅ h·ªá th·ªëng GTI
    """
    return {
        "ten_he_thong": "GTI - Growth Trading Intelligence", 
        "muc_tieu": {
            "thoi_gian_nam_giu": "T·ªëi ƒëa 1 th√°ng",
            "sinh_loi_muc_tieu": "10-25%",
            "cat_lo": "5-8%"
        },
        "tieu_chi_loc": [
            "‚úÖ Xu h∆∞·ªõng k·ªπ thu·∫≠t: EMA10 > EMA20 v√† gi√° n·∫±m tr√™n c·∫£ EMA10 & EMA20",
            "‚úÖ Volume & breakout: C√≥ √≠t nh·∫•t 1 phi√™n breakout v·ªõi volume > 1.5x TB20",
            "‚úÖ V·ªã tr√≠ gi√°: ∆Øu ti√™n c·ªï phi·∫øu ti·ªám c·∫≠n ƒë·ªânh 1 nƒÉm (< 15%)",
            "‚úÖ Pullback ƒë√∫ng chu·∫©n: Sau breakout, pullback v·ªÅ EMA10 ho·∫∑c EMA20"
        ],
        "bang_diem_gti": {
            "4_diem": "üü¢ R·∫§T T√çCH C·ª∞C - BUY signal",
            "3_diem": "üü° T√çCH C·ª∞C - Theo d√µi",
            "2_diem": "üü† TRUNG T√çNH - HOLD",
            "0-1_diem": "üî¥ TI√äU C·ª∞C - AVOID"
        },
        "chi_so_tra_ve": {
            "gti_trend_check": "Ki·ªÉm tra xu h∆∞·ªõng GTI (True/False)",
            "gti_recent_breakout": "C√≥ breakout g·∫ßn ƒë√¢y kh√¥ng (True/False)",
            "gti_dist_to_high_percent": "Kho·∫£ng c√°ch ƒë·∫øn ƒë·ªânh 1 nƒÉm (%)",
            "gti_is_pullback": "ƒêang pullback v·ªÅ EMA10/20 kh√¥ng (True/False)",
            "gti_score": "ƒêi·ªÉm t·ªïng GTI (0-4)",
            "gti_signal": "T√≠n hi·ªáu GTI (BUY/HOLD/AVOID)"
        }
    }

@app.get("/market-scan")
def market_scan_full(
    category: str = "vn30",
    min_gti_score: int = 2, 
    min_combined_score: int = 3,
    limit: Optional[int] = None
):
    """
    üîç MARKET SCANNER - Qu√©t th·ªã tr∆∞·ªùng theo danh m·ª•c (SECTOR-BASED)
    
    Args:
        category: Lo·∫°i danh s√°ch (vn30, popular, banking, real_estate, technology, etc.)
        min_gti_score: ƒêi·ªÉm GTI t·ªëi thi·ªÉu (0-4)
        min_combined_score: ƒêi·ªÉm t·ªïng h·ª£p t·ªëi thi·ªÉu (GTI + Pattern)
        limit: Gi·ªõi h·∫°n s·ªë k·∫øt qu·∫£ tr·∫£ v·ªÅ (m·∫∑c ƒë·ªãnh kh√¥ng gi·ªõi h·∫°n)
    
    Returns:
        Danh s√°ch c√°c m√£ c·ªï phi·∫øu ƒë·∫°t ti√™u ch√≠ GTI, s·∫Øp x·∫øp theo ƒëi·ªÉm s·ªë
        
    Available categories:
        - vn30: VN30 stocks (30 m√£ blue-chip)
        - popular: Popular stocks (8 m√£ ph·ªï bi·∫øn) 
        - Sectors (~40 m√£ m·ªói sector):
          * banking, real_estate, technology, manufacturing
          * consumer, energy, securities, construction
          * utilities, transportation
    """
    try:
        print(f"üîç Market Scan Request: category={category}, min_gti={min_gti_score}, min_combined={min_combined_score}")
        
        # Validate parameters
        if min_gti_score < 0 or min_gti_score > 4:
            raise HTTPException(status_code=400, detail="min_gti_score ph·∫£i t·ª´ 0-4")
        
        if min_combined_score < -5 or min_combined_score > 18:
            raise HTTPException(status_code=400, detail="min_combined_score ph·∫£i t·ª´ -5 ƒë·∫øn 18")
        
        # Th·ª±c hi·ªán market scan v·ªõi cache
        scan_result = cache_market_scan(
            category=category,
            min_gti_score=min_gti_score,
            min_combined_score=min_combined_score
        )
        
        # Ki·ªÉm tra l·ªói
        if "error" in scan_result:
            raise HTTPException(status_code=400, detail=scan_result["error"])
        
        # √Åp d·ª•ng limit n·∫øu c√≥
        results = scan_result["scan_results"]
        if limit and limit > 0:
            results = results[:limit]
        
        # Chu·∫©n b·ªã response
        response = {
            "market_scan_results": {
                "qualified_stocks": results,
                "total_qualified": len(scan_result["scan_results"]),
                "returned_count": len(results),
                "scan_criteria": {
                    "category": category,
                    "min_gti_score": min_gti_score,
                    "min_combined_score": min_combined_score,
                    "limit_applied": limit
                }
            },
            "category_info": scan_result["category_info"],
            "execution_statistics": scan_result["statistics"],
            "market_overview": {
                "scan_time": scan_result["scan_timestamp"],
                "performance_summary": f"Qu√©t {scan_result['statistics']['total_scanned']} m√£ trong {scan_result['statistics']['execution_time_seconds']}s",
                "success_rate": round(scan_result["statistics"]["success_count"] / scan_result["statistics"]["total_scanned"] * 100, 1) if scan_result["statistics"]["total_scanned"] > 0 else 0
            },
            "api_info": {
                "endpoint": "market-scan",
                "version": "1.0.0",
                "description": "üîç GTI Market Scanner - Qu√©t th·ªã tr∆∞·ªùng t·ª± ƒë·ªông"
            }
        }
        
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói market scan: {str(e)}")

@app.get("/market-scan/vn30")
def market_scan_vn30_quick(min_gti_score: int = 3, min_combined_score: int = 4):
    """
    üéØ QUICK VN30 SCAN - Qu√©t nhanh VN30 v·ªõi ti√™u ch√≠ cao
    
    Returns:
        Top VN30 stocks ƒë·∫°t ti√™u ch√≠ cao
    """
    try:
        scan_result = market_scan_by_category(
            category="vn30",
            min_gti_score=min_gti_score,
            min_combined_score=min_combined_score
        )
        
        results = scan_result["scan_results"]
        
        return {
            "vn30_scan": {
                "qualified_stocks": results,
                "total_qualified": len(results),
                "scan_criteria": {
                    "focus": "VN30 - Blue chips",
                    "min_gti_score": min_gti_score,
                    "min_combined_score": min_combined_score
                }
            },
            "quick_summary": {
                "top_3_picks": results[:3] if len(results) >= 3 else results,
                "qualification_rate": f"{len(results)}/30 VN30 stocks",
                "market_sentiment": "T√≠ch c·ª±c" if len(results) >= 5 else "Th·∫≠n tr·ªçng" if len(results) >= 2 else "Y·∫øu"
            },
            "execution_time": scan_result["statistics"]["execution_time_seconds"],
            "scan_timestamp": scan_result["scan_timestamp"]
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói VN30 scan: {str(e)}")

@app.get("/market-scan/top-picks")
def market_scan_top_picks_endpoint(limit: int = 15):
    """
    üèÜ TOP PICKS - L·∫•y top m√£ c·ªï phi·∫øu t·ªët nh·∫•t t·ª´ t·∫•t c·∫£ sectors
    
    Args:
        limit: S·ªë l∆∞·ª£ng top picks c·∫ßn tr·∫£ v·ªÅ (m·∫∑c ƒë·ªãnh 15)
    
    Returns:
        Top picks v·ªõi ph√¢n t√≠ch chi ti·∫øt v√† khuy·∫øn ngh·ªã
        
    Sector-based approach:
        - Quick mode: Qu√©t VN30 + top 10 t·ª´ m·ªói sector (~130 m√£)
        - Normal mode: Qu√©t VN30 + top 20 t·ª´ m·ªói sector (~230 m√£)
        - An to√†n h∆°n, tr√°nh rate limiting, coverage ƒë·∫ßy ƒë·ªß c√°c ng√†nh
    """
    try:
        if limit < 1 or limit > 50:
            raise HTTPException(status_code=400, detail="Limit ph·∫£i t·ª´ 1-50")
        
        top_picks_result = market_scan_top_picks(limit=limit)
        
        if "message" in top_picks_result:
            return {
                "message": top_picks_result["message"],
                "scan_info": top_picks_result["scan_info"]
            }
        
        return {
            "top_picks_analysis": {
                "top_stocks": top_picks_result["top_picks"],
                "categorized_by_strength": top_picks_result["categorized_picks"],
                "sector_distribution": top_picks_result["sector_distribution"],
                "market_summary": top_picks_result["summary"]
            },
            "investment_recommendation": top_picks_result["recommendation"],
            "scan_performance": top_picks_result["scan_info"],
            "usage_guide": {
                "very_strong_stocks": "C√¢n nh·∫Øc mua v·ªõi t·ª∑ tr·ªçng cao",
                "strong_stocks": "Theo d√µi v√† mua khi c√≥ pullback", 
                "moderate_stocks": "Ch·ªù t√≠n hi·ªáu r√µ r√†ng h∆°n",
                "risk_management": "Lu√¥n ƒë·∫∑t stop-loss 5-8%"
            },
            "scan_timestamp": top_picks_result["scan_timestamp"]
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói top picks: {str(e)}")

@app.get("/market-scan/sector/{sector}")
def market_scan_by_sector(
    sector: str,
    min_gti_score: int = 2,
    min_combined_score: int = 3
):
    """
    üè¢ SECTOR SCAN - Qu√©t theo ng√†nh c·ª• th·ªÉ
    
    Args:
        sector: T√™n ng√†nh (banking, real_estate, technology, manufacturing, etc.)
        min_gti_score: ƒêi·ªÉm GTI t·ªëi thi·ªÉu
        min_combined_score: ƒêi·ªÉm t·ªïng h·ª£p t·ªëi thi·ªÉu
    
    Returns:
        K·∫øt qu·∫£ scan theo ng√†nh v·ªõi ph√¢n t√≠ch so s√°nh
    """
    try:
        # Validate sector
        available_sectors = list(GTIConfig.SECTOR_STOCKS.keys())
        if sector.lower() not in available_sectors:
            raise HTTPException(
                status_code=400, 
                detail=f"Ng√†nh '{sector}' kh√¥ng h·ª£p l·ªá. C√°c ng√†nh c√≥ s·∫µn: {available_sectors}"
            )
        
        scan_result = market_scan_by_category(
            category=sector.lower(),
            min_gti_score=min_gti_score,
            min_combined_score=min_combined_score
        )
        
        results = scan_result["scan_results"]
        sector_stocks = GTIConfig.SECTOR_STOCKS[sector.lower()]
        
        return {
            "sector_analysis": {
                "sector_name": sector.upper(),
                "qualified_stocks": results,
                "qualification_stats": {
                    "qualified_count": len(results),
                    "total_in_sector": len(sector_stocks),
                    "qualification_rate": f"{len(results)}/{len(sector_stocks)}",
                    "percentage": round(len(results) / len(sector_stocks) * 100, 1) if len(sector_stocks) > 0 else 0
                }
            },
            "sector_performance": {
                "top_performer": results[0] if results else None,
                "average_score": round(sum([s["combined_score"] for s in results]) / len(results), 2) if results else 0,
                "score_distribution": {
                    "excellent": len([s for s in results if s["combined_score"] >= 6]),
                    "good": len([s for s in results if 4 <= s["combined_score"] < 6]),
                    "fair": len([s for s in results if 2 <= s["combined_score"] < 4])
                }
            },
            "execution_info": scan_result["statistics"],
            "scan_timestamp": scan_result["scan_timestamp"]
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói sector scan: {str(e)}")

@app.get("/market-scan/custom")
def market_scan_custom_list(
    stocks: str,
    min_gti_score: int = 2,
    min_combined_score: int = 3
):
    """
    üéØ CUSTOM SCAN - Qu√©t danh s√°ch m√£ t√πy ch·ªânh
    
    Args:
        stocks: Danh s√°ch m√£ c·ªï phi·∫øu c√°ch nhau b·ªüi d·∫•u ph·∫©y (VD: FPT,VIC,HPG,VCB)
        min_gti_score: ƒêi·ªÉm GTI t·ªëi thi·ªÉu
        min_combined_score: ƒêi·ªÉm t·ªïng h·ª£p t·ªëi thi·ªÉu
    
    Returns:
        K·∫øt qu·∫£ scan cho danh s√°ch t√πy ch·ªânh
    """
    try:
        # Parse stock list
        stock_list = [stock.strip().upper() for stock in stocks.split(",") if stock.strip()]
        
        if not stock_list:
            raise HTTPException(status_code=400, detail="Danh s√°ch m√£ c·ªï phi·∫øu kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
        
        if len(stock_list) > 50:
            raise HTTPException(status_code=400, detail="T·ªëi ƒëa 50 m√£ c·ªï phi·∫øu trong m·ªôt l·∫ßn scan")
        
        print(f"üéØ Custom scan cho {len(stock_list)} m√£: {stock_list}")
        
        # Th·ª±c hi·ªán scan
        scan_result = market_scan_parallel(
            stock_list=stock_list,
            min_gti_score=min_gti_score,
            min_combined_score=min_combined_score,
            max_workers=GTIConfig.MARKET_SCAN_BATCH_SIZE,
            timeout=GTIConfig.MARKET_SCAN_TIMEOUT
        )
        
        results = scan_result["scan_results"]
        
        return {
            "custom_scan_results": {
                "input_stocks": stock_list,
                "qualified_stocks": results,
                "scan_summary": {
                    "input_count": len(stock_list),
                    "qualified_count": len(results),
                    "success_rate": f"{scan_result['statistics']['success_count']}/{len(stock_list)}",
                    "qualification_rate": f"{len(results)}/{len(stock_list)}"
                }
            },
            "performance_ranking": {
                "top_3": results[:3] if len(results) >= 3 else results,
                "worst_qualified": results[-1] if results else None
            },
            "execution_statistics": scan_result["statistics"],
            "errors": scan_result["errors"] if scan_result["errors"] else None,
            "scan_timestamp": scan_result["scan_timestamp"]
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói custom scan: {str(e)}")

@app.get("/market-scan/quick-check/{stock}")
def quick_check_single_stock(stock: str):
    """
    ‚ö° QUICK CHECK - Ki·ªÉm tra nhanh m·ªôt m√£ c√≥ ƒë·∫°t ti√™u ch√≠ GTI kh√¥ng
    
    Args:
        stock: M√£ c·ªï phi·∫øu c·∫ßn ki·ªÉm tra
    
    Returns:
        K·∫øt qu·∫£ nhanh v·ªõi ƒëi·ªÉm s·ªë v√† ƒë√°nh gi√°
    """
    try:
        result = scan_single_stock(
            stock_symbol=stock.upper(),
            min_gti_score=0,  # Kh√¥ng l·ªçc ƒë·ªÉ lu√¥n c√≥ k·∫øt qu·∫£
            min_combined_score=-10  # ƒê·ªÉ lu√¥n tr·∫£ v·ªÅ k·∫øt qu·∫£
        )
        
        if result is None:
            # N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£, th·ª≠ l·∫•y d·ªØ li·ªáu c∆° b·∫£n
            try:
                end_date = datetime.now().strftime("%Y-%m-%d")
                start_date = (datetime.now() - timedelta(days=365)).strftime("%Y-%m-%d")
                
                df = lay_du_lieu_co_phieu_vnstock(stock.upper(), start_date, end_date)
                if df is None or df.empty:
                    raise HTTPException(status_code=404, detail=f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£ {stock}")
                
                df_analyzed = tinh_toan_chi_bao_ky_thuat(df)
                latest = df_analyzed.iloc[-1]
                gti_score = int(latest['gti_score']) if pd.notna(latest['gti_score']) else 0
                
                return {
                    "stock_symbol": stock.upper(),
                    "current_price": round(float(latest['close']), 2),
                    "gti_score": gti_score,
                    "quick_evaluation": "Kh√¥ng ƒë·∫°t ti√™u ch√≠ GTI c∆° b·∫£n" if gti_score < 2 else "C√≥ ti·ªÅm nƒÉng",
                    "recommendation": "AVOID" if gti_score < 2 else "WATCH",
                    "note": "Ch∆∞a c√≥ pattern analysis ƒë·∫ßy ƒë·ªß"
                }
                
            except Exception:
                raise HTTPException(status_code=404, detail=f"Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu cho m√£ {stock}")
        
        return {
            "quick_check_result": {
                "stock_symbol": result["stock_symbol"],
                "current_price": result["current_price"],
                "scores": {
                    "gti_score": result["gti_score"],
                    "pattern_score": result["pattern_score"]["net"],
                    "combined_score": result["combined_score"]
                },
                "evaluation": result["evaluation"],
                "key_signals": {
                    "trend_ok": result["key_metrics"]["gti_trend_check"],
                    "recent_breakout": result["key_metrics"]["gti_recent_breakout"],
                    "good_pullback": result["key_metrics"]["gti_is_pullback"],
                    "near_high": result["key_metrics"]["gti_dist_to_high_percent"] is not None and result["key_metrics"]["gti_dist_to_high_percent"] <= 15
                }
            },
            "quick_summary": f"GTI: {result['gti_score']}/4, Pattern: {result['pattern_score']['bullish']}B/{result['pattern_score']['bearish']}Be, T·ªïng: {result['combined_score']}",
            "current_patterns": result["current_patterns"],
            "check_timestamp": datetime.now().isoformat()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói quick check: {str(e)}")

# üöÄ CACHE MANAGEMENT ENDPOINTS

@app.get("/cache/stats")
def get_cache_stats():
    """
    üìä CACHE STATS - Xem th·ªëng k√™ performance c·ªßa cache
    
    Returns:
        Th·ªëng k√™ chi ti·∫øt v·ªÅ cache usage v√† performance
    """
    try:
        stats = gti_cache.get_stats()
        
        return {
            "cache_statistics": stats,
            "performance_info": {
                "cache_enabled": stats.get("cache_enabled", False),
                "hit_rate": f"{stats.get('total_hits', 0)} hits total",
                "efficiency": "Good" if stats.get('total_hits', 0) > stats.get('valid_entries', 1) else "Low",
                "memory_usage": stats.get("memory_usage_estimate", "N/A")
            },
            "recommendations": {
                "cache_working": stats.get("cache_enabled", False),
                "entries_count": stats.get("total_entries", 0),
                "expired_cleanup_needed": stats.get("expired_entries", 0) > 10
            },
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        return {"error": f"L·ªói l·∫•y cache stats: {str(e)}"}

@app.post("/cache/clear")
def clear_cache(operation: Optional[str] = None):
    """
    üóëÔ∏è CACHE CLEAR - X√≥a cache ƒë·ªÉ refresh d·ªØ li·ªáu
    
    Args:
        operation: Lo·∫°i operation c·∫ßn x√≥a (None = x√≥a t·∫•t c·∫£)
    
    Returns:
        Confirmation v√† stats m·ªõi
    """
    try:
        old_stats = gti_cache.get_stats()
        old_count = old_stats.get("total_entries", 0)
        
        if operation:
            gti_cache.invalidate(operation)
            message = f"Cache cleared for operation: {operation}"
        else:
            gti_cache.invalidate()
            message = "All cache cleared"
        
        new_stats = gti_cache.get_stats()
        new_count = new_stats.get("total_entries", 0)
        
        return {
            "cache_clear_result": {
                "message": message,
                "entries_before": old_count,
                "entries_after": new_count,
                "entries_removed": old_count - new_count
            },
            "current_stats": new_stats,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        return {"error": f"L·ªói clear cache: {str(e)}"}

@app.get("/system/performance")
def get_system_performance():
    """
    ‚ö° SYSTEM PERFORMANCE - T·ªïng quan performance c·ªßa h·ªá th·ªëng
    
    Returns:
        Th√¥ng tin performance t·ªïng h·ª£p
    """
    try:
        cache_stats = gti_cache.get_stats()
        
        return {
            "system_performance": {
                "cache_system": {
                    "enabled": cache_stats.get("cache_enabled", False),
                    "total_entries": cache_stats.get("total_entries", 0),
                    "hit_count": cache_stats.get("total_hits", 0),
                    "memory_usage": cache_stats.get("memory_usage_estimate", "N/A")
                },
                "optimization_settings": {
                    "market_scan_timeout": f"{GTIConfig.MARKET_SCAN_TIMEOUT}s",
                    "batch_size": GTIConfig.MARKET_SCAN_BATCH_SIZE,
                    "single_stock_timeout": f"{GTIConfig.SINGLE_STOCK_TIMEOUT}s",
                    "chunk_size": GTIConfig.CHUNK_SIZE_FOR_LARGE_SCANS,
                    "progressive_timeout": GTIConfig.ENABLE_PROGRESSIVE_TIMEOUT,
                    "quick_mode": GTIConfig.TOP_PICKS_QUICK_MODE
                },
                "performance_features": [
                    "‚úÖ Chunked processing for large scans",
                    "‚úÖ Progressive timeout scaling",
                    "‚úÖ In-memory caching system", 
                    "‚úÖ Optimized worker pool",
                    "‚úÖ Quick mode for top picks",
                    "‚úÖ Individual stock result caching"
                ]
            },
            "recommendations": {
                "use_cache": "Enable caching for repeated requests",
                "use_quick_mode": "Use quick mode for faster top picks",
                "batch_requests": "Combine multiple stock checks into custom scans",
                "limit_results": "Use limit parameter for faster responses"
            },
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        return {"error": f"L·ªói system performance: {str(e)}"}

# üîÑ ASYNCHRONOUS MARKET SCANNING ENDPOINTS
# These endpoints implement the asynchronous processing pattern from upgrade.md

@app.post("/market-scan/start")
def start_market_scan_task(
    task_type: str,
    category: Optional[str] = None,
    sector: Optional[str] = None,
    stocks: Optional[str] = None,
    limit: Optional[int] = None,
    min_gti_score: int = 2,
    min_combined_score: int = 3
):
    """
    üöÄ START ASYNC TASK - B·∫Øt ƒë·∫ßu t√°c v·ª• qu√©t th·ªã tr∆∞·ªùng b·∫•t ƒë·ªìng b·ªô
    
    Args:
        task_type: Lo·∫°i task (top_picks, sector_scan, category_scan, custom_scan)
        category: Danh m·ª•c cho category_scan (vn30, popular, etc.)
        sector: Ng√†nh cho sector_scan (banking, technology, etc.)
        stocks: Danh s√°ch m√£ cho custom_scan (VD: FPT,VIC,HPG)
        limit: Gi·ªõi h·∫°n k·∫øt qu·∫£ cho top_picks
        min_gti_score: ƒêi·ªÉm GTI t·ªëi thi·ªÉu (0-4)
        min_combined_score: ƒêi·ªÉm t·ªïng h·ª£p t·ªëi thi·ªÉu
    
    Returns:
        task_id ƒë·ªÉ theo d√µi ti·∫øn tr√¨nh
        
    Example requests:
        POST /market-scan/start?task_type=top_picks&limit=15
        POST /market-scan/start?task_type=sector_scan&sector=banking
        POST /market-scan/start?task_type=category_scan&category=vn30
        POST /market-scan/start?task_type=custom_scan&stocks=FPT,VIC,HPG,VCB
    """
    try:
        # Validate task_type
        valid_task_types = ["top_picks", "sector_scan", "category_scan", "custom_scan"]
        if task_type not in valid_task_types:
            raise HTTPException(
                status_code=400, 
                detail=f"task_type kh√¥ng h·ª£p l·ªá. C√°c lo·∫°i h·ªó tr·ª£: {valid_task_types}"
            )
        
        # Prepare parameters based on task type
        parameters = {
            "min_gti_score": min_gti_score,
            "min_combined_score": min_combined_score
        }
        
        if task_type == "top_picks":
            parameters["limit"] = limit or 15
            
        elif task_type == "sector_scan":
            if not sector:
                raise HTTPException(status_code=400, detail="sector l√† b·∫Øt bu·ªôc cho sector_scan")
            available_sectors = list(GTIConfig.SECTOR_STOCKS.keys())
            if sector.lower() not in available_sectors:
                raise HTTPException(
                    status_code=400,
                    detail=f"Ng√†nh '{sector}' kh√¥ng h·ª£p l·ªá. C√°c ng√†nh c√≥ s·∫µn: {available_sectors}"
                )
            parameters["sector"] = sector.lower()
            
        elif task_type == "category_scan":
            if not category:
                raise HTTPException(status_code=400, detail="category l√† b·∫Øt bu·ªôc cho category_scan")
            parameters["category"] = category.lower()
            
        elif task_type == "custom_scan":
            if not stocks:
                raise HTTPException(status_code=400, detail="stocks l√† b·∫Øt bu·ªôc cho custom_scan")
            stock_list = [s.strip().upper() for s in stocks.split(",") if s.strip()]
            if len(stock_list) > 50:
                raise HTTPException(status_code=400, detail="T·ªëi ƒëa 50 m√£ c·ªï phi·∫øu trong m·ªôt l·∫ßn scan")
            parameters["stocks"] = stocks
        
        # Create and start task
        task_id = task_manager.create_task(task_type, parameters)
        
        return {
            "status": "processing_started",
            "task_id": task_id,
            "task_type": task_type,
            "parameters": parameters,
            "message": "T√°c v·ª• ƒë√£ ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu. S·ª≠ d·ª•ng task_id ƒë·ªÉ ki·ªÉm tra ti·∫øn tr√¨nh.",
            "next_steps": {
                "check_status": f"GET /market-scan/status/{task_id}",
                "get_result": f"GET /market-scan/result/{task_id}"
            },
            "estimated_time": {
                "top_picks": "2-5 ph√∫t",
                "sector_scan": "1-3 ph√∫t", 
                "category_scan": "30s-2 ph√∫t",
                "custom_scan": "10s-2 ph√∫t t√πy s·ªë l∆∞·ª£ng m√£"
            }.get(task_type, "1-5 ph√∫t"),
            "timestamp": datetime.now().isoformat()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói kh·ªüi t·∫°o task: {str(e)}")

@app.get("/market-scan/status/{task_id}")
def get_market_scan_status(task_id: str):
    """
    üîç CHECK STATUS - Ki·ªÉm tra tr·∫°ng th√°i t√°c v·ª• b·∫•t ƒë·ªìng b·ªô
    
    Args:
        task_id: ID c·ªßa task c·∫ßn ki·ªÉm tra
    
    Returns:
        Th√¥ng tin tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa task
        
    Possible statuses:
        - pending: ƒêang ch·ªù x·ª≠ l√Ω
        - running: ƒêang th·ª±c hi·ªán 
        - completed: Ho√†n th√†nh (c√≥ th·ªÉ l·∫•y k·∫øt qu·∫£)
        - failed: Th·∫•t b·∫°i (c√≥ th√¥ng tin l·ªói)
        - expired: ƒê√£ h·∫øt h·∫°n (>1 ti·∫øng)
    """
    try:
        status = task_manager.get_task_status(task_id)
        
        if not status:
            raise HTTPException(status_code=404, detail=f"Kh√¥ng t√¨m th·∫•y task v·ªõi ID: {task_id}")
        
        response = {
            "task_status": status,
            "timestamp": datetime.now().isoformat()
        }
        
        # Add appropriate next action based on status
        if status["status"] == "running":
            response["message"] = "T√°c v·ª• ƒëang ch·∫°y, vui l√≤ng ƒë·ª£i..."
            response["action"] = "Ki·ªÉm tra l·∫°i sau 10-30 gi√¢y"
            
        elif status["status"] == "completed":
            response["message"] = "T√°c v·ª• ho√†n th√†nh! C√≥ th·ªÉ l·∫•y k·∫øt qu·∫£."
            response["action"] = f"GET /market-scan/result/{task_id}"
            
        elif status["status"] == "failed":
            response["message"] = "T√°c v·ª• th·∫•t b·∫°i."
            response["action"] = "Ki·ªÉm tra l·ªói v√† th·ª≠ t·∫°o task m·ªõi"
            
        elif status["status"] == "expired":
            response["message"] = "T√°c v·ª• ƒë√£ h·∫øt h·∫°n."
            response["action"] = "T·∫°o task m·ªõi ƒë·ªÉ th·ª±c hi·ªán"
            
        else:  # pending
            response["message"] = "T√°c v·ª• ƒëang ch·ªù x·ª≠ l√Ω..."
            response["action"] = "Ki·ªÉm tra l·∫°i trong v√†i gi√¢y"
        
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói ki·ªÉm tra status: {str(e)}")

@app.get("/market-scan/result/{task_id}")
def get_market_scan_result(task_id: str):
    """
    üìä GET RESULT - L·∫•y k·∫øt qu·∫£ c·ªßa t√°c v·ª• ƒë√£ ho√†n th√†nh
    
    Args:
        task_id: ID c·ªßa task c·∫ßn l·∫•y k·∫øt qu·∫£
    
    Returns:
        K·∫øt qu·∫£ ph√¢n t√≠ch ƒë·∫ßy ƒë·ªß t·ª´ task ƒë√£ ho√†n th√†nh
        
    Note:
        - Ch·ªâ c√≥ th·ªÉ l·∫•y k·∫øt qu·∫£ khi status = "completed"
        - K·∫øt qu·∫£ s·∫Ω b·ªã x√≥a sau 1 ti·∫øng ƒë·ªÉ ti·∫øt ki·ªám b·ªô nh·ªõ
    """
    try:
        # First check status
        status = task_manager.get_task_status(task_id)
        
        if not status:
            raise HTTPException(status_code=404, detail=f"Kh√¥ng t√¨m th·∫•y task v·ªõi ID: {task_id}")
        
        if status["status"] != "completed":
            current_status = status["status"]
            if current_status == "running":
                raise HTTPException(status_code=202, detail="T√°c v·ª• v·∫´n ƒëang ch·∫°y. Vui l√≤ng ƒë·ª£i.")
            elif current_status == "failed":
                raise HTTPException(status_code=400, detail=f"T√°c v·ª• th·∫•t b·∫°i: {status.get('error', 'Unknown error')}")
            elif current_status == "expired":
                raise HTTPException(status_code=410, detail="T√°c v·ª• ƒë√£ h·∫øt h·∫°n. Vui l√≤ng t·∫°o task m·ªõi.")
            else:
                raise HTTPException(status_code=202, detail=f"T√°c v·ª• ch∆∞a ho√†n th√†nh. Status: {current_status}")
        
        # Get result
        result = task_manager.get_task_result(task_id)
        
        if not result:
            raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ cho task n√†y.")
        
        # Format response with metadata
        response = {
            "task_info": {
                "task_id": task_id,
                "task_type": result["task_type"],
                "parameters": result["parameters"],
                "execution_time": result.get("execution_time"),
                "completed_at": status["completed_at"]
            },
            "scan_results": result["scan_result"],
            "result_summary": {
                "success": True,
                "data_available": True,
                "result_type": result["task_type"]
            },
            "timestamp": datetime.now().isoformat()
        }
        
        # Add task-specific formatting
        if result["task_type"] == "top_picks":
            if "top_picks" in result["scan_result"]:
                response["formatted_results"] = {
                    "market_overview": "Top picks scan completed successfully",
                    "top_recommendations": result["scan_result"].get("top_picks", [])[:5],
                    "total_qualified": len(result["scan_result"].get("top_picks", [])),
                    "recommendation": result["scan_result"].get("recommendation", {})
                }
        
        elif result["task_type"] in ["sector_scan", "category_scan"]:
            if "scan_results" in result["scan_result"]:
                qualified_stocks = result["scan_result"]["scan_results"]
                response["formatted_results"] = {
                    "scan_overview": f"{result['task_type']} completed successfully",
                    "qualified_stocks": qualified_stocks,
                    "total_qualified": len(qualified_stocks),
                    "top_3_picks": qualified_stocks[:3] if len(qualified_stocks) >= 3 else qualified_stocks
                }
        
        elif result["task_type"] == "custom_scan":
            if "scan_results" in result["scan_result"]:
                qualified_stocks = result["scan_result"]["scan_results"]
                response["formatted_results"] = {
                    "scan_overview": "Custom scan completed successfully",
                    "input_stocks": result["parameters"]["stocks"].split(","),
                    "qualified_stocks": qualified_stocks,
                    "qualification_rate": f"{len(qualified_stocks)}/{len(result['parameters']['stocks'].split(','))}"
                }
        
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói l·∫•y k·∫øt qu·∫£: {str(e)}")

# üìä TASK MANAGEMENT ENDPOINTS

@app.get("/tasks/stats")
def get_task_manager_stats():
    """
    üìä TASK STATS - Xem th·ªëng k√™ c·ªßa task manager
    
    Returns:
        Th·ªëng k√™ v·ªÅ c√°c task ƒëang ch·∫°y v√† ƒë√£ ho√†n th√†nh
    """
    try:
        stats = task_manager.get_stats()
        
        return {
            "task_manager_stats": stats,
            "system_info": {
                "async_processing": "Active",
                "background_workers": stats["executor_info"]["max_workers"],
                "total_tasks_handled": stats["total_tasks"]
            },
            "recommendations": {
                "optimal_usage": "S·ª≠ d·ª•ng async endpoints cho scan l·ªõn (>20 m√£)",
                "check_interval": "Ki·ªÉm tra status m·ªói 15-30 gi√¢y",
                "task_cleanup": "Tasks t·ª± ƒë·ªông cleanup sau 1 ti·∫øng"
            },
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        return {"error": f"L·ªói l·∫•y task stats: {str(e)}"}